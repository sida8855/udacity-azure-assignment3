# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

name: Azure Pipelines
variables:
  python.version: '3.6.9'
  terraform.version: '1.0.11'
stages:
- stage: Infrastructure
  displayName: 'Provisioning Infrastructure'
  jobs: 
  - job: 'Terraform'
    displayName: 'Provisioning Infrastucture'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install terraform'
      inputs:
        terraformVersion: '$(terraform.version)'
    - task: TerraformTaskV2@2
      displayName: 'Run terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'Azure subscription 1(09998214-d1cb-445d-a0c2-6e0ebc67bd65)'
        backendAzureRmResourceGroupName: 'terraform'
        backendAzureRmStorageAccountName: 'tstate10'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        
    - task: TerraformTaskV2@2
      displayName: 'Run terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'Azure subscription 1(09998214-d1cb-445d-a0c2-6e0ebc67bd65)'
    - task: TerraformTaskV2@2
      displayName: 'Run terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'Azure subscription 1(09998214-d1cb-445d-a0c2-6e0ebc67bd65)'

- stage: Build
  displayName: 'Build resources'
  jobs: 
  - job: 'Build_artifacts'
    displayName: 'Build artifacts'
    pool:
      vmImage: 'ubuntu-latest'       
    steps:
    - task: ArchiveFiles@2
      displayName: 'Upload Fakerestapi'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Fakerestspi zip file'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifact: 'fakerestapi'
        publishLocation: 'pipeline'

    - task: ArchiveFiles@2
      displayName: 'Upload Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Selenium zip file'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifact: 'selenium'
        publishLocation: 'pipeline'

- stage: Deploy
  jobs:
  - deployment: 'Deploy_fakerestapi'
    displayName: 'Deploy Web App Fakerestapi'
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure WebApp'
            inputs:
              azureSubscription: 'webapp'
              appName: 'webapp-api-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy

- stage: Test
  jobs:
  - deployment: 'Selenium_Test'
    displayName: 'Run Selenium Tests'
    environment:
      name: 'testVM'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Run Selenium Tests'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                python3 -m pip install --upgrade pip
                pip3 install selenium
                /usr/bin/chromium-browser --version
                /usr/bin/chromedriver --version
                cd $(Pipeline.Workspace)/selenium
                find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete
                unzip -o selenium-$(Build.BuildId).zip
                ls -la
                sudo mkdir -p /var/log/selenium
                sudo chmod 777 /var/log/selenium
                python3 -u uitest.py 2>&1 | sudo tee -a '/var/log/selenium/selenium-test-$(Build.BuildId).log'
                # copy log file to $(System.DefaultWorkingDirectory)/log/selenium/
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium
                pwd
                sudo cp '/var/log/selenium/selenium-test-$(Build.BuildId).log' 'log/selenium/selenium-test-$(Build.BuildId).log'
                ls -la
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Selenium log'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test-$(Build.BuildId).log'
              artifactName: 'selenium-logs'

  - job: 'Postman_Test'
    displayName: 'Postman Integration Tests'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:    
    - task: NodeTool@0
      displayName: 'Install Node v12.X'
      inputs:
        versionSpec: '12.x'
    - task: Bash@3
      displayName: 'Install Newman CLI'
      inputs:
        targetType: 'inline'
        script: |
          npm install -g newman
          mkdir -p output/newman/
    - task: Bash@3
      displayName: 'Run Postman Regression and Validation Test'
      inputs:
        targetType: 'inline'
        script: |
          newman run automatedtesting/postman/postman-tests.postman_collection.json \
           --environment automatedtesting/postman/walkthrough.postman_environment.json \
           --suppress-exit-code \
           --delay-request 5000 \
           --reporters cli,junit --reporter-junit-export output/newman/test_result.xml
    - task: PublishTestResults@2
      displayName: 'Publish Postman Regression and Validation Test Results'
      inputs:
        testRunner: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/output/newman/'
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: 'Postman Test Results'
  - job: 'Jmeter_tests'
    displayName: 'JMeter Tests'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:     
      - task: Bash@3
        displayName: 'Install JMeter'
        inputs:
          targetType: 'inline'
          script: |
            sudo apt-get install openjdk-11-jre-headless -y
            java -version
            wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
            tar xzvf jmeter.tgz
            rm jmeter.tgz
            apache-jmeter-5.4.1/bin/jmeter --version
            mkdir -p log/jmeter
      - task: Bash@3
        displayName: 'Run JMeter Stress Test'
        inputs:
          targetType: 'inline'
          script: |
            apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/stress_test.jmx \
                                     -l log/jmeter/stress-test-result.csv \
                                     -e -f -o log/jmeter/stress-test-report.html \
                                     -j log/jmeter/jmeter-stress-test.log
      - task: Bash@3
        displayName: 'Run JMeter Endurance Test'
        inputs:
          targetType: 'inline'
          script: |
            apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/endurance_test.jmx \
                                     -l log/jmeter/endurance-test-result.csv \
                                     -e -f -o log/jmeter/endurance-test-report.html \
                                     -j log/jmeter/jmeter-endurance-test.log      
      - task: ArchiveFiles@2
        displayName: 'Archive JMeter stress test HTML report'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-report.html'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: ArchiveFiles@2
        displayName: 'Archive JMeter endurance test HTML report'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-report.html'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: Bash@3
        displayName: 'Clean Up Tests'
        inputs:
          targetType: 'inline'
          script: |
            rm -rf log/jmeter/stress-test-report.html
            rm -rf log/jmeter/endurance-test-report.html
      - task: PublishPipelineArtifact@1
        displayName: 'Publish JMeter logs'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
          artifactName: 'drop-jmeter-logs'