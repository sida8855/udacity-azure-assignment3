# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

name: Azure Pipelines
variables:
  python.version: '3.7.6'
  terraform.version: '1.0.11'
stages:
- stage: Infrastructure
  displayName: 'Provisioning Infrastructure'
  jobs: 
  - job: 'Terraform'
    displayName: 'Provisioning Infrastucture'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '$(terraform.version)'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'Azure subscription 1(09998214-d1cb-445d-a0c2-6e0ebc67bd65)'
        backendAzureRmResourceGroupName: 'terraform'
        backendAzureRmStorageAccountName: 'tstate10'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'Azure subscription 1(09998214-d1cb-445d-a0c2-6e0ebc67bd65)'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'Azure subscription 1(09998214-d1cb-445d-a0c2-6e0ebc67bd65)'

- stage: Build
  displayName: 'Build resources'
  jobs: 
  - job: 'Build_artifacts'
    displayName: 'Build artifacts'
    pool:
      vmImage: 'ubuntu-latest'       
    steps:
    - task: ArchiveFiles@2
      displayName: 'Upload Fakerestapi'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Fakerestspi zip file'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifact: 'fakerestapi'
        publishLocation: 'pipeline'

    - task: ArchiveFiles@2
      displayName: 'Upload Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Selenium zip file'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifact: 'selenium'
        publishLocation: 'pipeline'

- stage: Deploy
  jobs:
  - deployment: 'Deploy_fakerestapi'
    displayName: 'Deploy Fakerestapi'
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure WebApp'
            inputs:
              azureSubscription: 'webapp'
              appName: 'webapp-api-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
  - deployment: 'Deployment_vm'
    displayName: 'Deploy VM for Selenium'
    environment:
      name: 'testVM'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Prepare for selenium'
            inputs:
              targetType: 'inline'
              script: |
                pwd
                hostname
                sudo apt-get install software-properties-common -y
                sudo apt-add-repository universe -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                python3 -m pip install --upgrade pip
                pip3 install selenium
                python3 -V
                pip3 -V
                /usr/bin/chromium-browser --version
                /usr/bin/chromedriver --version
- stage: Test
  jobs:
  - deployment: 'Deployment_vm'
    displayName: 'Run Selenium Tests'
    environment:
      name: 'testVM'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Run Selenium Tests'
            inputs:
              targetType: 'inline'
              script: |
                cd $(Pipeline.Workspace)/selenium
                unzip -o selenium-$(Build.BuildId).zip
                pwd
                ls -la
                sudo mkdir -p /var/log/selenium
                sudo chmod 777 /var/log/selenium
                ls -la
                sudo python3 -u tests.py 2>&1 | sudo tee -a '/var/log/selenium/selenium-test-$(Build.BuildId).log'
                # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium
                pwd
                sudo cp '/var/log/selenium/selenium-test-$(Build.BuildId).log' 'log/selenium/selenium-test-$(Build.BuildId).log'
                ls -la
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Selenium log'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test-$(Build.BuildId).log'
              artifactName: 'selenium-logs'